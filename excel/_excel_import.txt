การ import ข้อมูลจาก Excel เข้าสู่ฐานข้อมูลหรือการประมวลผลในเว็บแอปพลิเคชัน สามารถทำได้หลายวิธี ฉันจะแสดงวิธีหนึ่งโดยใช้ PHP และไลบรารี `PHPExcel` (หรือ `PhpSpreadsheet` ที่เป็นตัวแทน) เพื่อช่วยในการจัดการ Excel:

1. **ติดตั้งไลบรารี `PhpSpreadsheet`:**
   ติดตั้งไลบรารี `PhpSpreadsheet` ผ่าน Composer โดยใช้คำสั่ง:

   ```
   composer require phpoffice/phpspreadsheet
   ```

2. **สร้าง HTML Form สำหรับอัปโหลดไฟล์ Excel:**
   ```html
   <form action="import.php" method="post" enctype="multipart/form-data">
     <input type="file" name="excelFile" required>
     <button type="submit" name="submit">Import</button>
   </form>
   ```

3. **สร้างไฟล์ PHP สำหรับการ Import: `import.php`**
   ```php
   <?php
   require 'vendor/autoload.php'; // ระบุ path ถูกต้องสำหรับ autoloader

   if (isset($_POST['submit'])) {
       $inputFileName = $_FILES['excelFile']['tmp_name'];

       $spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($inputFileName);
       $worksheet = $spreadsheet->getActiveSheet();

       $data = array();
       foreach ($worksheet->getRowIterator() as $row) {
           $rowData = array();
           foreach ($row->getCellIterator() as $cell) {
               $rowData[] = $cell->getValue();
           }
           $data[] = $rowData;
       }

       // ทำสิ่งที่คุณต้องการกับข้อมูล, เช่นเพิ่มลงในฐานข้อมูล

       echo "<pre>";
       print_r($data);
       echo "</pre>";
   }
   ?>
   ```
   ในตัวอย่างข้างบน เราใช้ `PhpSpreadsheet` เพื่อโหลดไฟล์ Excel และดึงข้อมูลออกมาเป็นอาร์เรย์ คุณสามารถปรับแต่งการจัดการข้อมูลตามความต้องการของคุณ.

ควรจำไว้ว่านี่เป็นเพียงตัวอย่างพื้นฐาน เมื่อทำการ import ข้อมูลจาก Excel เข้าสู่ระบบที่ซับซ้อนขึ้น คุณอาจต้องพิจารณาการตรวจสอบและการจัดการข้อมูลเพิ่มเติม เช่น การตรวจสอบความถูกต้องของข้อมูล การวิเคราะห์และการแปลงข้อมูล และอื่น ๆ ตามความต้องการของแอปพลิเคชันและฐานข้อมูล.



ข้อผิดพลาดที่คุณพบเกิดจากสิ่งที่เรียกว่า PHP extensions หรือโมดูลขยายที่จำเป็นต้องติดตั้งและเปิดใช้งานในระบบของคุณเพื่อให้ `phpoffice/phpspreadsheet` ทำงานได้อย่างถูกต้อง ในที่นี้มีการกำหนดว่าต้องใช้ ext-gd (extension สำหรับการประมวลผลรูปภาพ) และ ext-zip (extension สำหรับการจัดการไฟล์ zip) ที่ไม่มีอยู่ในระบบของคุณ.

สิ่งที่คุณสามารถทำได้:

1. **ติดตั้ง PHP Extensions ที่ต้องการ:**
   - เปิดไฟล์ `php.ini` ที่ใช้โดย PHP และแก้ไขหรือเปิดคอมเม้นส่วนที่เกี่ยวข้องกับ extensions ext-gd และ ext-zip.
   - หากคุณต้องการใช้งาน `phpoffice/phpspreadsheet` คุณจำเป็นต้องติดตั้ง ext-gd และ ext-zip ก่อน.
   - หลังจากแก้ไข `php.ini` ให้รีสตาร์ทเซิร์ฟเวอร์เว็บหรือเซิร์ฟเวอร์ PHP.

2. **ติดตั้งเวอร์ชันที่เข้ากับระบบของคุณ:**
   - หากคุณไม่สามารถติดตั้ง ext-gd และ ext-zip ได้ เพราะเหตุผลใดเหตุหนึ่ง คุณสามารถพิจารณาใช้เวอร์ชันของ `phpoffice/phpspreadsheet` ที่ไม่ต้องการ extensions เหล่านี้.
   - คุณสามารถลองใช้เวอร์ชันที่เข้ากับระบบของคุณได้เช่น `1.15.0` ซึ่งอาจไม่มีความต้องการ ext-gd และ ext-zip ที่จำเป็น.

คำเตือน: การไม่ติดตั้งหรือปิดใช้งาน extensions ที่ `phpoffice/phpspreadsheet` ต้องการอาจทำให้บางความสามารถของไลบรารีเป็นไปไม่ได้ และอาจเกิดความผิดพลาดหรือปัญหาในการใช้งาน.



I'm planning version 2.0 with some bc breaks, and I'm looking at dropping methods like setCellValueByColumnAndRow() which accepts column and row number arguments, leaving only setCellValue() which requires a cell address as a string value(e.g. 'C5').
There are 14 such methods defined in the WorkSheet class:

setCellValueByColumnAndRow() has equivalent setCellValue()
setCellValueExplicitByColumnAndRow() has equivalent setCellValueExplicit()
getCellByColumnAndRow() has equivalent getCell()
cellExistsByColumnAndRow() has equivalent cellExists()
getStyleByColumnAndRow() has equivalent getStyle()
setBreakByColumnAndRow() has equivalent setBreak()
mergeCellsByColumnAndRow() has equivalent mergeCells()
unmergeCellsByColumnAndRow() has equivalent unmergeCells()
protectCellsByColumnAndRow() has equivalent protectCells()
unprotectCellsByColumnAndRow() has equivalent unprotectCells()
setAutoFilterByColumnAndRow() has equivalent setAutoFilter()
freezePaneByColumnAndRow() has equivalent freezePane()
getCommentByColumnAndRow() has equivalent getComment()
setSelectedCellByColumnAndRow() has equivalent setSelectedCells()
There is some inconsistency here, with other methods that only accept a cell address like IV255 and that have no "byColumnAndRow" eqivalent (e.g setTopLeftCell() and setSelectedCell()); so this deprecation will provide more consistency.

The base methods already provide more flexibility than the byColumnAndRow() methods

There are also a couple of column-only methods:

getColumnDimensionByColumn() has equivalent getColumnDimension()
insertNewColumnBeforeByIndex() has equivalent insertNewColumnBefore()